// Generated by CoffeeScript 1.8.0
(function() {
  var Template, fs, string, sugar, templates,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  sugar = require('sugar');

  fs = require('fs');

  string = require('string');

  templates = {};

  Template = (function() {
    function Template(schema, section, obj) {
      this.obj = obj;
      this.schema = schema;
      this.section = section;
      this.attributes = {};
      this.create();
    }

    Template.prototype.getSection = function(key) {
      if (this.schema.sections[key]) {
        return this.schema.sections[key];
      }
    };

    Template.prototype.create = function() {
      var fields, key, _i, _len, _ref, _results;
      fields = this.getSection(this.section).fields;
      for (key in fields) {
        if (fields[key].required) {
          this.attributes[key] = fields[key]["default"] || '';
        }
      }
      if (this.obj) {
        _ref = (Object.keys(fields)).intersect(Object.keys(this.obj));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(this.attributes[key] = this.obj[key]);
        }
        return _results;
      }
    };

    Template.prototype.getAttributeFromSection = function(section, key) {
      return this.getSection(section).fields[key];
    };

    Template.prototype.set = function(key, value) {
      var attribute, current;
      attribute = this.getAttributeFromSection(this.section, key);
      if (attribute) {
        if (attribute.available) {
          if (__indexOf.call(attribute.available, value) >= 0) {
            return this.attributes[key] = value;
          } else {
            throw new Error('Not available value');
          }
        } else {
          if (attribute.multiple) {
            current = this.attributes[key];
            this.attributes[key] = [];
            if (current) {
              this.attributes[key].push(current);
            }
            return this.attributes[key].push(value);
          } else {
            return this.attributes[key] = value;
          }
        }
      } else {
        throw new Error('This key not in schema');
      }
    };

    Template.prototype.get = function(key) {
      return this.attributes[key];
    };

    return Template;

  })();

  fs.readdirSync("" + __dirname + "/templates").forEach(function(file) {
    var name, schema;
    name = string(file).chompRight('.json').s;
    schema = require("./templates/" + file);
    return templates[name] = function(section, obj) {
      return new Template(schema, section, obj);
    };
  });

  module.exports = templates;

}).call(this);
