// Generated by CoffeeScript 1.8.0
(function() {
  var ConfTemplate, confs, fs, string, sugar,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  sugar = require('sugar');

  fs = require('fs');

  string = require('string');

  confs = {};

  ConfTemplate = (function() {
    function ConfTemplate(schema, section, obj) {
      this.obj = obj;
      this.schema = schema;
      this.section = section;
      this.attributes = {};
      this.create();
    }

    ConfTemplate.prototype.getSection = function(key) {
      if (this.schema.sections[key]) {
        return this.schema.sections[key];
      }
    };

    ConfTemplate.prototype.create = function() {
      var fields, key, _i, _len, _ref, _results;
      fields = this.getSection(this.section).fields;
      for (key in fields) {
        if (fields[key].required) {
          this.attributes[key] = fields[key]["default"] || '';
        }
      }
      if (this.obj) {
        _ref = (Object.keys(fields)).intersect(Object.keys(this.obj));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(this.attributes[key] = this.obj[key]);
        }
        return _results;
      }
    };

    ConfTemplate.prototype.getGeneral = function() {
      var fields, general, key;
      fields = this.getSection('general').fields;
      general = {};
      for (key in fields) {
        if (fields[key].required) {
          general[key] = fields[key]["default"] || '';
        }
      }
      return general;
    };

    ConfTemplate.prototype.getAttributeFromSection = function(section, key) {
      return this.getSection(section).fields[key];
    };

    ConfTemplate.prototype.set = function(key, value) {
      var attribute;
      attribute = this.getAttributeFromSection(this.section, key);
      if (attribute) {
        if (attribute.available) {
          if (__indexOf.call(attribute.available, value) >= 0) {
            return this.attributes[key] = value;
          } else {
            throw new Error('Not available value');
          }
        } else {
          return this.attributes[key] = value;
        }
      } else {
        throw new Error('This key not in schema');
      }
    };

    ConfTemplate.prototype.get = function(key) {
      return this.attributes[key];
    };

    return ConfTemplate;

  })();

  fs.readdirSync("" + __dirname + "/templates").forEach(function(file) {
    var name, schema;
    name = string(file).chompRight('.json').s;
    schema = require("./templates/" + file);
    return confs[name] = function(section, obj) {
      return new ConfTemplate(schema, section, obj);
    };
  });

  module.exports = confs;

}).call(this);
